import useProfile from "@/hooks/useProfile";
import { phoneValidator } from "@/utils/validators";
import AntDesign from "@expo/vector-icons/AntDesign";
import React, { useState } from "react";
import { Modal, ScrollView, TouchableOpacity, View, StyleSheet } from "react-native";
import { TextInput, Menu, Provider, Text, HelperText } from "react-native-paper";
type CountryCode = keyof typeof CountryCodeEmojiMap;

const CountryCodeEmojiMap: Record<string, string> = {
  AF: "ğŸ‡¦ğŸ‡«",
  AX: "ğŸ‡¦ğŸ‡½",
  AL: "ğŸ‡¦ğŸ‡±",
  DZ: "ğŸ‡©ğŸ‡¿",
  AS: "ğŸ‡¦ğŸ‡¸",
  AD: "ğŸ‡¦ğŸ‡©",
  AO: "ğŸ‡¦ğŸ‡´",
  AI: "ğŸ‡¦ğŸ‡®",
  AQ: "ğŸ‡¦ğŸ‡¶",
  AG: "ğŸ‡¦ğŸ‡¬",
  AR: "ğŸ‡¦ğŸ‡·",
  AM: "ğŸ‡¦ğŸ‡²",
  AW: "ğŸ‡¦ğŸ‡¼",
  AU: "ğŸ‡¦ğŸ‡º",
  AT: "ğŸ‡¦ğŸ‡¹",
  AZ: "ğŸ‡¦ğŸ‡¿",
  BS: "ğŸ‡§ğŸ‡¸",
  BH: "ğŸ‡§ğŸ‡­",
  BD: "ğŸ‡§ğŸ‡©",
  BB: "ğŸ‡§ğŸ‡§",
  BY: "ğŸ‡§ğŸ‡¾",
  BE: "ğŸ‡§ğŸ‡ª",
  BZ: "ğŸ‡§ğŸ‡¿",
  BJ: "ğŸ‡§ğŸ‡¯",
  BM: "ğŸ‡§ğŸ‡²",
  BT: "ğŸ‡§ğŸ‡¹",
  BO: "ğŸ‡§ğŸ‡´",
  BQ: "ğŸ‡§ğŸ‡¶",
  BA: "ğŸ‡§ğŸ‡¦",
  BW: "ğŸ‡§ğŸ‡¼",
  BV: "ğŸ‡§ğŸ‡»",
  BR: "ğŸ‡§ğŸ‡·",
  IO: "ğŸ‡®ğŸ‡´",
  BN: "ğŸ‡§ğŸ‡³",
  BG: "ğŸ‡§ğŸ‡¬",
  BF: "ğŸ‡§ğŸ‡«",
  BI: "ğŸ‡§ğŸ‡®",
  CV: "ğŸ‡¨ğŸ‡»",
  KH: "ğŸ‡°ğŸ‡­",
  CM: "ğŸ‡¨ğŸ‡²",
  CA: "ğŸ‡¨ğŸ‡¦",
  KY: "ğŸ‡°ğŸ‡¾",
  CF: "ğŸ‡¨ğŸ‡«",
  TD: "ğŸ‡¹ğŸ‡©",
  CL: "ğŸ‡¨ğŸ‡±",
  CN: "ğŸ‡¨ğŸ‡³",
  CX: "ğŸ‡¨ğŸ‡½",
  CC: "ğŸ‡¨ğŸ‡¨",
  CO: "ğŸ‡¨ğŸ‡´",
  KM: "ğŸ‡°ğŸ‡²",
  CG: "ğŸ‡¨ğŸ‡¬",
  CD: "ğŸ‡¨ğŸ‡©",
  CK: "ğŸ‡¨ğŸ‡°",
  CR: "ğŸ‡¨ğŸ‡·",
  CI: "ğŸ‡¨ğŸ‡®",
  HR: "ğŸ‡­ğŸ‡·",
  CU: "ğŸ‡¨ğŸ‡º",
  CW: "ğŸ‡¨ğŸ‡¼",
  CY: "ğŸ‡¨ğŸ‡¾",
  CZ: "ğŸ‡¨ğŸ‡¿",
  DK: "ğŸ‡©ğŸ‡°",
  DJ: "ğŸ‡©ğŸ‡¯",
  DM: "ğŸ‡©ğŸ‡²",
  DO: "ğŸ‡©ğŸ‡´",
  EC: "ğŸ‡ªğŸ‡¨",
  EG: "ğŸ‡ªğŸ‡¬",
  SV: "ğŸ‡¸ğŸ‡»",
  GQ: "ğŸ‡¬ğŸ‡¶",
  ER: "ğŸ‡ªğŸ‡·",
  EE: "ğŸ‡ªğŸ‡ª",
  SZ: "ğŸ‡¸ğŸ‡¿",
  ET: "ğŸ‡ªğŸ‡¹",
  FK: "ğŸ‡«ğŸ‡°",
  FO: "ğŸ‡«ğŸ‡´",
  FJ: "ğŸ‡«ğŸ‡¯",
  FI: "ğŸ‡«ğŸ‡®",
  FR: "ğŸ‡«ğŸ‡·",
  GF: "ğŸ‡¬ğŸ‡«",
  PF: "ğŸ‡µğŸ‡«",
  TF: "ğŸ‡¹ğŸ‡«",
  GA: "ğŸ‡¬ğŸ‡¦",
  GM: "ğŸ‡¬ğŸ‡²",
  GE: "ğŸ‡¬ğŸ‡ª",
  DE: "ğŸ‡©ğŸ‡ª",
  GH: "ğŸ‡¬ğŸ‡­",
  GI: "ğŸ‡¬ğŸ‡®",
  GR: "ğŸ‡¬ğŸ‡·",
  GL: "ğŸ‡¬ğŸ‡±",
  GD: "ğŸ‡¬ğŸ‡©",
  GP: "ğŸ‡¬ğŸ‡µ",
  GU: "ğŸ‡¬ğŸ‡º",
  GT: "ğŸ‡¬ğŸ‡¹",
  GG: "ğŸ‡¬ğŸ‡¬",
  GN: "ğŸ‡¬ğŸ‡³",
  GW: "ğŸ‡¬ğŸ‡¼",
  GY: "ğŸ‡¬ğŸ‡¾",
  HT: "ğŸ‡­ğŸ‡¹",
  HM: "ğŸ‡­ğŸ‡²",
  VA: "ğŸ‡»ğŸ‡¦",
  HN: "ğŸ‡­ğŸ‡³",
  HK: "ğŸ‡­ğŸ‡°",
  HU: "ğŸ‡­ğŸ‡º",
  IS: "ğŸ‡®ğŸ‡¸",
  IN: "ğŸ‡®ğŸ‡³",
  ID: "ğŸ‡®ğŸ‡©",
  IR: "ğŸ‡®ğŸ‡·",
  IQ: "ğŸ‡®ğŸ‡¶",
  IE: "ğŸ‡®ğŸ‡ª",
  IM: "ğŸ‡®ğŸ‡²",
  IL: "ğŸ‡®ğŸ‡±",
  IT: "ğŸ‡®ğŸ‡¹",
  JM: "ğŸ‡¯ğŸ‡²",
  JP: "ğŸ‡¯ğŸ‡µ",
  JE: "ğŸ‡¯ğŸ‡ª",
  JO: "ğŸ‡¯ğŸ‡´",
  KZ: "ğŸ‡°ğŸ‡¿",
  KE: "ğŸ‡°ğŸ‡ª",
  KI: "ğŸ‡°ğŸ‡®",
  KP: "ğŸ‡°ğŸ‡µ",
  KR: "ğŸ‡°ğŸ‡·",
  KW: "ğŸ‡°ğŸ‡¼",
  KG: "ğŸ‡°ğŸ‡¬",
  LA: "ğŸ‡±ğŸ‡¦",
  LV: "ğŸ‡±ğŸ‡»",
  LB: "ğŸ‡±ğŸ‡§",
  LS: "ğŸ‡±ğŸ‡¸",
  LR: "ğŸ‡±ğŸ‡·",
  LY: "ğŸ‡±ğŸ‡¾",
  LI: "ğŸ‡±ğŸ‡®",
  LT: "ğŸ‡±ğŸ‡¹",
  LU: "ğŸ‡±ğŸ‡º",
  MO: "ğŸ‡²ğŸ‡´",
  MG: "ğŸ‡²ğŸ‡¬",
  MW: "ğŸ‡²ğŸ‡¼",
  MY: "ğŸ‡²ğŸ‡¾",
  MV: "ğŸ‡²ğŸ‡»",
  ML: "ğŸ‡²ğŸ‡±",
  MT: "ğŸ‡²ğŸ‡¹",
  MH: "ğŸ‡²ğŸ‡­",
  MQ: "ğŸ‡²ğŸ‡¶",
  MR: "ğŸ‡²ğŸ‡·",
  MU: "ğŸ‡²ğŸ‡º",
  YT: "ğŸ‡¾ğŸ‡¹",
  MX: "ğŸ‡²ğŸ‡½",
  FM: "ğŸ‡«ğŸ‡²",
  MD: "ğŸ‡²ğŸ‡©",
  MC: "ğŸ‡²ğŸ‡¨",
  MN: "ğŸ‡²ğŸ‡³",
  ME: "ğŸ‡²ğŸ‡ª",
  MS: "ğŸ‡²ğŸ‡¸",
  MA: "ğŸ‡²ğŸ‡¦",
  MZ: "ğŸ‡²ğŸ‡¿",
  MM: "ğŸ‡²ğŸ‡²",
  NA: "ğŸ‡³ğŸ‡¦",
  NR: "ğŸ‡³ğŸ‡·",
  NP: "ğŸ‡³ğŸ‡µ",
  NL: "ğŸ‡³ğŸ‡±",
  NC: "ğŸ‡³ğŸ‡¨",
  NZ: "ğŸ‡³ğŸ‡¿",
  NI: "ğŸ‡³ğŸ‡®",
  NE: "ğŸ‡³ğŸ‡ª",
  NG: "ğŸ‡³ğŸ‡¬",
  NU: "ğŸ‡³ğŸ‡º",
  NF: "ğŸ‡³ğŸ‡«",
  MK: "ğŸ‡²ğŸ‡°",
  MP: "ğŸ‡²ğŸ‡µ",
  NO: "ğŸ‡³ğŸ‡´",
  OM: "ğŸ‡´ğŸ‡²",
  PK: "ğŸ‡µğŸ‡°",
  PW: "ğŸ‡µğŸ‡¼",
  PS: "ğŸ‡µğŸ‡¸",
  PA: "ğŸ‡µğŸ‡¦",
  PG: "ğŸ‡µğŸ‡¬",
  PY: "ğŸ‡µğŸ‡¾",
  PE: "ğŸ‡µğŸ‡ª",
  PH: "ğŸ‡µğŸ‡­",
  PN: "ğŸ‡µğŸ‡³",
  PL: "ğŸ‡µğŸ‡±",
  PT: "ğŸ‡µğŸ‡¹",
  PR: "ğŸ‡µğŸ‡·",
  QA: "ğŸ‡¶ğŸ‡¦",
  RE: "ğŸ‡·ğŸ‡ª",
  RO: "ğŸ‡·ğŸ‡´",
  RU: "ğŸ‡·ğŸ‡º",
  RW: "ğŸ‡·ğŸ‡¼",
  BL: "ğŸ‡§ğŸ‡±",
  SH: "ğŸ‡¸ğŸ‡­",
  KN: "ğŸ‡°ğŸ‡³",
  LC: "ğŸ‡±ğŸ‡¨",
  MF: "ğŸ‡²ğŸ‡«",
  PM: "ğŸ‡µğŸ‡²",
  VC: "ğŸ‡»ğŸ‡¨",
  WS: "ğŸ‡¼ğŸ‡¸",
  SM: "ğŸ‡¸ğŸ‡²",
  ST: "ğŸ‡¸ğŸ‡¹",
  SA: "ğŸ‡¸ğŸ‡¦",
  SN: "ğŸ‡¸ğŸ‡³",
  RS: "ğŸ‡·ğŸ‡¸",
  SC: "ğŸ‡¸ğŸ‡¨",
  SL: "ğŸ‡¸ğŸ‡±",
  SG: "ğŸ‡¸ğŸ‡¬",
  SX: "ğŸ‡¸ğŸ‡½",
  SK: "ğŸ‡¸ğŸ‡°",
  SI: "ğŸ‡¸ğŸ‡®",
  SB: "ğŸ‡¸ğŸ‡§",
  SO: "ğŸ‡¸ğŸ‡´",
  ZA: "ğŸ‡¿ğŸ‡¦",
  GS: "ğŸ‡¬ğŸ‡¸",
  SS: "ğŸ‡¸ğŸ‡¸",
  ES: "ğŸ‡ªğŸ‡¸",
  LK: "ğŸ‡±ğŸ‡°",
  SD: "ğŸ‡¸ğŸ‡©",
  SR: "ğŸ‡¸ğŸ‡·",
  SJ: "ğŸ‡¸ğŸ‡¯",
  SE: "ğŸ‡¸ğŸ‡ª",
  CH: "ğŸ‡¨ğŸ‡­",
  SY: "ğŸ‡¸ğŸ‡¾",
  TW: "ğŸ‡¹ğŸ‡¼",
  TJ: "ğŸ‡¹ğŸ‡¯",
  TZ: "ğŸ‡¹ğŸ‡¿",
  TH: "ğŸ‡¹ğŸ‡­",
  TL: "ğŸ‡¹ğŸ‡±",
  TG: "ğŸ‡¹ğŸ‡¬",
  TK: "ğŸ‡¹ğŸ‡°",
  TO: "ğŸ‡¹ğŸ‡´",
  TT: "ğŸ‡¹ğŸ‡¹",
  TN: "ğŸ‡¹ğŸ‡³",
  TR: "ğŸ‡¹ğŸ‡·",
  TM: "ğŸ‡¹ğŸ‡²",
  TC: "ğŸ‡¹ğŸ‡¨",
  TV: "ğŸ‡¹ğŸ‡»",
  UG: "ğŸ‡ºğŸ‡¬",
  UA: "ğŸ‡ºğŸ‡¦",
  AE: "ğŸ‡¦ğŸ‡ª",
  GB: "ğŸ‡¬ğŸ‡§",
  US: "ğŸ‡ºğŸ‡¸",
  UM: "ğŸ‡ºğŸ‡²",
  UY: "ğŸ‡ºğŸ‡¾",
  UZ: "ğŸ‡ºğŸ‡¿",
  VU: "ğŸ‡»ğŸ‡º",
  VE: "ğŸ‡»ğŸ‡ª",
  VN: "ğŸ‡»ğŸ‡³",
  VG: "ğŸ‡»ğŸ‡¬",
  VI: "ğŸ‡»ğŸ‡®",
  WF: "ğŸ‡¼ğŸ‡«",
  EH: "ğŸ‡ªğŸ‡­",
  YE: "ğŸ‡¾ğŸ‡ª",
  ZM: "ğŸ‡¿ğŸ‡²",
  ZW: "ğŸ‡¿ğŸ‡¼",
};

export default function PhoneNumberForm() {
  const { profile } = useProfile();
  const [phoneNumber, setPhoneNumber] = useState<{ value: string; error: string }>({ value: "", error: "" });
  const [searchTerm, setSearchTerm] = useState("");
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedItem, setSelectedItem] = useState("ğŸ‡ºğŸ‡¸");

  async function handleSave() {
    const phoneError = phoneValidator(phoneNumber.value);
    if (phoneError) {
      setPhoneNumber((prev) => ({ ...prev, error: phoneError }));
      return;
    }
    try {
      const response = await fetch(`${process.env.EXPO_PUBLIC_API_URL}/${profile.user_id}/update-phone`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ phone_number: phoneNumber.value }),
      });
      if (!response.ok) throw new Error("Error updating phone number");
      const result = await response.json();
      console.log(result);
    } catch (error) {
      console.error(error);
    }
  }

  const filteredFlags = Object.entries(CountryCodeEmojiMap)
    .filter(([code]) => {
      if (searchTerm.trim() === "") return true;
      return code.toLowerCase().includes(searchTerm.toLowerCase());
    })
    .map(([code, flag], index) => (
      <TouchableOpacity
        key={index}
        onPress={() => {
          setSelectedItem(flag);
          setModalVisible(false);
        }}
      >
        <Text style={styles.flagItem}>
          {flag} {code}
        </Text>
      </TouchableOpacity>
    ));

  return (
    <View style={{ padding: 20 }}>
      <TextInput
        label="Enter Phone Number"
        value={phoneNumber.value}
        error={!!phoneNumber.error}
        onChangeText={(text) => setPhoneNumber({ value: text, error: "" })}
        mode="outlined"
        placeholder="Enter Phone Number"
        inputMode="tel"
        returnKeyType="done"
        right={
          <TextInput.Icon onPress={handleSave} icon={(props) => <AntDesign name="save" size={24} color="black" />} />
        }
      />
      <HelperText type="error" visible={!!phoneNumber.error}>
        {phoneNumber.error}
      </HelperText>
      <Text style={{ marginTop: 10, color: "black" }}>
        {"\t"}*By entering your number you agree to recieve RSVP texts from Ikonic
      </Text>
      {/* <Modal visible={modalVisible} transparent animationType="fade" onRequestClose={() => setModalVisible(false)}>
          <TouchableOpacity style={styles.modalOverlay} activeOpacity={1} onPressOut={() => setModalVisible(false)}>
            <View style={styles.modalContent}>
              <TextInput
                value={searchTerm}
                onChangeText={setSearchTerm}
                mode="outlined"
                label="Search Country"
                right={
                  <TextInput.Icon icon={({ size, color }) => <AntDesign name="search1" size={24} color="black" />} />
                }
                style={{ marginBottom: 15 }}
              />
              <ScrollView>{filteredFlags}</ScrollView>
            </View>
          </TouchableOpacity>
        </Modal> */}
    </View>
  );
}

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContent: {
    width: "80%",
    maxHeight: "70%",
    backgroundColor: "white",
    padding: 15,
    borderRadius: 8,
  },
  flagItem: {
    fontSize: 28,
    padding: 10,
  },
});
