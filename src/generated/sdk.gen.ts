// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { MainApiV1GetData, MainApiV1GetResponse, GetUsersApiV1UsersGetData, GetUsersApiV1UsersGetResponse, GetUserByIdApiV1UsersUserIdGetData, GetUserByIdApiV1UsersUserIdGetResponse, GetUserByIdApiV1UsersUserIdGetError, UpdateUserApiV1UsersUserIdPatchData, UpdateUserApiV1UsersUserIdPatchResponse, UpdateUserApiV1UsersUserIdPatchError, CompleteOnboardingApiV1UsersOnboardingPostData, CompleteOnboardingApiV1UsersOnboardingPostResponse, GetFriendsApiV1UsersUserIdFriendsGetData, GetFriendsApiV1UsersUserIdFriendsGetResponse, GetFriendsApiV1UsersUserIdFriendsGetError, GetTripsApiV1TripsGetData, GetTripsApiV1TripsGetResponse, CreateTripApiV1TripsPostData, CreateTripApiV1TripsPostResponse, CreateTripApiV1TripsPostError, DeleteTripApiV1TripsTripIdDeleteData, DeleteTripApiV1TripsTripIdDeleteResponse, DeleteTripApiV1TripsTripIdDeleteError, GetTripApiV1TripsTripIdGetData, GetTripApiV1TripsTripIdGetResponse, GetTripApiV1TripsTripIdGetError, UpdateTripApiV1TripsTripIdPatchData, UpdateTripApiV1TripsTripIdPatchResponse, UpdateTripApiV1TripsTripIdPatchError, GetCarsForTripApiV1TripsTripIdCarsGetData, GetCarsForTripApiV1TripsTripIdCarsGetResponse, GetCarsForTripApiV1TripsTripIdCarsGetError, CreateCarApiV1TripsTripIdCarsPostData, CreateCarApiV1TripsTripIdCarsPostResponse, CreateCarApiV1TripsTripIdCarsPostError, DeleteCarApiV1TripsTripIdCarsCarIdDeleteData, DeleteCarApiV1TripsTripIdCarsCarIdDeleteResponse, DeleteCarApiV1TripsTripIdCarsCarIdDeleteError, GetCarByIdApiV1TripsTripIdCarsCarIdGetData, GetCarByIdApiV1TripsTripIdCarsCarIdGetResponse, GetCarByIdApiV1TripsTripIdCarsCarIdGetError, GetPassengersApiV1TripsTripIdCarsCarIdPassengersGetData, GetPassengersApiV1TripsTripIdCarsCarIdPassengersGetResponse, GetPassengersApiV1TripsTripIdCarsCarIdPassengersGetError, AddPassengerApiV1TripsTripIdCarsCarIdPassengersPostData, AddPassengerApiV1TripsTripIdCarsCarIdPassengersPostResponse, AddPassengerApiV1TripsTripIdCarsCarIdPassengersPostError, GetInvitedUsersApiV1TripsTripIdInvitesGetData, GetInvitedUsersApiV1TripsTripIdInvitesGetResponse, GetInvitedUsersApiV1TripsTripIdInvitesGetError, RsvpApiV1TripsTripIdInvitesUserIdPatchData, RsvpApiV1TripsTripIdInvitesUserIdPatchResponse, RsvpApiV1TripsTripIdInvitesUserIdPatchError, InviteUserApiV1TripsTripIdInvitesUserIdPostData, InviteUserApiV1TripsTripIdInvitesUserIdPostResponse, InviteUserApiV1TripsTripIdInvitesUserIdPostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Main
 * Root API endpoint.
 */
export const mainApiV1Get = <ThrowOnError extends boolean = false>(options?: Options<MainApiV1GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MainApiV1GetResponse, unknown, ThrowOnError>({
        url: '/api/v1/',
        ...options
    });
};

/**
 * Get Users
 * Return every user in the database.
 */
export const getUsersApiV1UsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersApiV1UsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersApiV1UsersGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/',
        ...options
    });
};

/**
 * Get User By Id
 * Return a specified user.
 */
export const getUserByIdApiV1UsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdApiV1UsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdApiV1UsersUserIdGetResponse, GetUserByIdApiV1UsersUserIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 * Update a user.
 */
export const updateUserApiV1UsersUserIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserApiV1UsersUserIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserApiV1UsersUserIdPatchResponse, UpdateUserApiV1UsersUserIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Complete Onboarding
 * Mark the currently authenticated user as having completed onboarding.
 */
export const completeOnboardingApiV1UsersOnboardingPost = <ThrowOnError extends boolean = false>(options?: Options<CompleteOnboardingApiV1UsersOnboardingPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompleteOnboardingApiV1UsersOnboardingPostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/onboarding',
        ...options
    });
};

/**
 * Get Friends
 * Fetch a friends list for a specific.
 */
export const getFriendsApiV1UsersUserIdFriendsGet = <ThrowOnError extends boolean = false>(options: Options<GetFriendsApiV1UsersUserIdFriendsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFriendsApiV1UsersUserIdFriendsGetResponse, GetFriendsApiV1UsersUserIdFriendsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}/friends',
        ...options
    });
};

/**
 * Get Trips
 * Return all trips for a user.
 */
export const getTripsApiV1TripsGet = <ThrowOnError extends boolean = false>(options?: Options<GetTripsApiV1TripsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTripsApiV1TripsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/',
        ...options
    });
};

/**
 * Create Trip
 * Create a new trip and user as trip participant.
 */
export const createTripApiV1TripsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTripApiV1TripsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTripApiV1TripsPostResponse, CreateTripApiV1TripsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Trip
 * Delete the specified trip.
 */
export const deleteTripApiV1TripsTripIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTripApiV1TripsTripIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTripApiV1TripsTripIdDeleteResponse, DeleteTripApiV1TripsTripIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}',
        ...options
    });
};

/**
 * Get Trip
 * Return a specific trip for a user.
 */
export const getTripApiV1TripsTripIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTripApiV1TripsTripIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTripApiV1TripsTripIdGetResponse, GetTripApiV1TripsTripIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}',
        ...options
    });
};

/**
 * Update Trip
 * Update existing trip data and refetch updated trip with owner.
 */
export const updateTripApiV1TripsTripIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateTripApiV1TripsTripIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTripApiV1TripsTripIdPatchResponse, UpdateTripApiV1TripsTripIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Cars For Trip
 * Return all cars for a trip.
 */
export const getCarsForTripApiV1TripsTripIdCarsGet = <ThrowOnError extends boolean = false>(options: Options<GetCarsForTripApiV1TripsTripIdCarsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCarsForTripApiV1TripsTripIdCarsGetResponse, GetCarsForTripApiV1TripsTripIdCarsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/cars/',
        ...options
    });
};

/**
 * Create Car
 * Create a new car.
 */
export const createCarApiV1TripsTripIdCarsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCarApiV1TripsTripIdCarsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCarApiV1TripsTripIdCarsPostResponse, CreateCarApiV1TripsTripIdCarsPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/cars/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Car
 * Delete a car.
 */
export const deleteCarApiV1TripsTripIdCarsCarIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCarApiV1TripsTripIdCarsCarIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCarApiV1TripsTripIdCarsCarIdDeleteResponse, DeleteCarApiV1TripsTripIdCarsCarIdDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/cars/{car_id}',
        ...options
    });
};

/**
 * Get Car By Id
 * Return a car.
 */
export const getCarByIdApiV1TripsTripIdCarsCarIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCarByIdApiV1TripsTripIdCarsCarIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCarByIdApiV1TripsTripIdCarsCarIdGetResponse, GetCarByIdApiV1TripsTripIdCarsCarIdGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/cars/{car_id}',
        ...options
    });
};

/**
 * Get Passengers
 * Return all passengers for a car.
 */
export const getPassengersApiV1TripsTripIdCarsCarIdPassengersGet = <ThrowOnError extends boolean = false>(options: Options<GetPassengersApiV1TripsTripIdCarsCarIdPassengersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPassengersApiV1TripsTripIdCarsCarIdPassengersGetResponse, GetPassengersApiV1TripsTripIdCarsCarIdPassengersGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/cars/{car_id}/passengers',
        ...options
    });
};

/**
 * Add Passenger
 * Add a passenger to a car.
 */
export const addPassengerApiV1TripsTripIdCarsCarIdPassengersPost = <ThrowOnError extends boolean = false>(options: Options<AddPassengerApiV1TripsTripIdCarsCarIdPassengersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddPassengerApiV1TripsTripIdCarsCarIdPassengersPostResponse, AddPassengerApiV1TripsTripIdCarsCarIdPassengersPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/cars/{car_id}/passengers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Invited Users
 * Return Invited Users for a trip.
 */
export const getInvitedUsersApiV1TripsTripIdInvitesGet = <ThrowOnError extends boolean = false>(options: Options<GetInvitedUsersApiV1TripsTripIdInvitesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInvitedUsersApiV1TripsTripIdInvitesGetResponse, GetInvitedUsersApiV1TripsTripIdInvitesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/invites',
        ...options
    });
};

/**
 * Rsvp
 * RSVP to a trip invite.
 */
export const rsvpApiV1TripsTripIdInvitesUserIdPatch = <ThrowOnError extends boolean = false>(options: Options<RsvpApiV1TripsTripIdInvitesUserIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RsvpApiV1TripsTripIdInvitesUserIdPatchResponse, RsvpApiV1TripsTripIdInvitesUserIdPatchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/invites/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Invite User
 * Invite a user to a trip.
 */
export const inviteUserApiV1TripsTripIdInvitesUserIdPost = <ThrowOnError extends boolean = false>(options: Options<InviteUserApiV1TripsTripIdInvitesUserIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteUserApiV1TripsTripIdInvitesUserIdPostResponse, InviteUserApiV1TripsTripIdInvitesUserIdPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/trips/{trip_id}/invites/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};